{"version":3,"sources":["graphql/client.js","Pagination/Pagination.js","component/Header/Header.js","component/Pokemon/Pokemon.js","component/ReversePokemon/ReversePokemon.js","container/Pokemons.js","Pagination/paginate.js","App.js","serviceWorker.js","index.js"],"names":["GET_POKEMONS","gql","Pagination","totalPros","currentPage","perPage","onPageChange","pageCount","Math","ceil","pages","range","style","height","className","aria-label","map","page","key","Button","cursor","onClick","Header","props","Alert","variant","Heading","appTitle","Badge","pill","poks","to","Pokemon","pokemons","pokemonsCar","ids","Helmet","Table","bordered","hover","pokemon","id","name","width","src","image","alt","ReversePokemon","slice","reverse","Pokemons","useState","setCurrentPage","useQuery","variables","first","data","pros","startIndex","_","take","value","paginate","length","path","render","routeProps","exact","App","client","ApolloClient","uri","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0a043ad.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const GET_POKEMONS = gql`\n  query pokemons($first: Int!) {\n    pokemons(first: $first) {\n      id\n      name\n      image\n      number\n    }\n  }\n`;\n","import React from \"react\";\nimport { range } from \"lodash\";\nimport { Button } from \"react-bootstrap\";\n\nconst Pagination = ({ totalPros, currentPage, perPage, onPageChange }) => {\n  const pageCount = Math.ceil(totalPros / perPage);\n  if (pageCount === 1) return null;\n\n  const pages = range(1, pageCount + 1);\n\n  return (\n    <nav\n      style={{ height: \"100px\" }}\n      className=\"mb-5 mt-5\"\n      aria-label=\"Page navigation\"\n    >\n      <ul className=\"pagination justify-content-center\">\n        {pages.map((page) => (\n          <li\n            key={page}\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\n          >\n            <Button\n              // href={toString()}\n              className=\"page-link\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => onPageChange(page)}\n            >\n              {page}\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Alert, Badge } from \"react-bootstrap\";\n\nconst Header = (props) => {\n  return (\n    <Alert variant=\"info\" className=\"text-center\">\n      <Alert.Heading>\n        {props.appTitle} and <span className=\"fa fa-heart text-danger\" />\n      </Alert.Heading>\n      <hr />\n      <h5>\n        There are\n        <Badge pill variant=\"primary\" className=\"mr-1 ml-1\">\n          {props.poks}\n        </Badge>\n        Pokemons\n      </h5>\n      <div className=\"d-flex justify-content-around\">\n        <Link to=\"/Pokemon-List-React-GraphQL/\">Main Table</Link>\n        <Link to=\"/Pokemon-List-React-GraphQL/reverseList\">Reverse Table</Link>\n      </div>\n    </Alert>\n  );\n};\n\nexport default Header;\n","import React, { Fragment } from \"react\";\n\nimport { Table } from \"react-bootstrap\";\nimport { Helmet } from \"react-helmet\";\n\nconst Pokemon = ({ pokemons, pokemonsCar }) => {\n  let ids = 1;\n\n  const mainPokemonTitle = \"Main Pokemon\";\n\n  return (\n    <Fragment>\n      <Helmet>\n        <title>{mainPokemonTitle}</title>\n      </Helmet>\n      <div className=\"container\">\n        <Table bordered hover className=\"mt-5 text-center shadow-lg\">\n          <thead>\n            <tr>\n              <th>\n                <h3>#</h3>\n              </th>\n              <th>\n                <h3>Pokemons Name</h3>\n              </th>\n              <th>\n                <h3>Images</h3>\n              </th>\n            </tr>\n          </thead>\n          {pokemons &&\n            pokemonsCar.map((pokemon) => (\n              <tbody key={pokemon.id}>\n                <tr>\n                  <td>\n                    <b>{ids++}</b>\n                  </td>\n                  <td>\n                    <b>{pokemon.name}</b>\n                  </td>\n                  <td className=\"d-flex justify-content-center\">\n                    <img\n                      style={{ height: \"50px\", width: \"50px\" }}\n                      src={pokemon.image}\n                      alt={pokemon.name}\n                    />\n                  </td>\n                </tr>\n              </tbody>\n            ))}\n        </Table>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Pokemon;\n","import React, { Fragment } from \"react\";\n\nimport { Table } from \"react-bootstrap\";\nimport { Helmet } from \"react-helmet\";\n\nconst ReversePokemon = ({ pokemons, pokemonsCar }) => {\n  let ids = 5;\n\n  const reversePokemonTitle = \"Reverse Pokemon\";\n\n  return (\n    <Fragment>\n      <Helmet>\n        <title>{reversePokemonTitle}</title>\n      </Helmet>\n      <div className=\"container\">\n        <Table bordered hover className=\"mt-5 text-center shadow-lg\">\n          <thead>\n            <tr>\n              <th>\n                <h3>#</h3>\n              </th>\n              <th>\n                <h3>Pokemons Name</h3>\n              </th>\n              <th>\n                <h3>Images</h3>\n              </th>\n            </tr>\n          </thead>\n          {pokemons &&\n            pokemonsCar\n              .slice(0)\n              .reverse()\n              .map((pokemon) => (\n                <tbody key={pokemon.id}>\n                  <tr>\n                    <td>\n                      <b>{ids--}</b>\n                    </td>\n                    <td>\n                      <b>{pokemon.name}</b>\n                    </td>\n                    <td className=\"d-flex justify-content-center\">\n                      <img\n                        style={{ height: \"50px\", width: \"50px\" }}\n                        src={pokemon.image}\n                        alt={pokemon.name}\n                      />\n                    </td>\n                  </tr>\n                </tbody>\n              ))}\n        </Table>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default ReversePokemon;\n","import React, { Fragment, useState } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_POKEMONS } from \"../graphql/client\";\n\nimport { paginate } from \"../Pagination/paginate\";\nimport Pagination from \"../Pagination/Pagination\";\n\nimport Header from \"../component/Header/Header\";\nimport Pokemon from \"../component/Pokemon/Pokemon\";\nimport ReversePokemon from \"../component/ReversePokemon/ReversePokemon\";\n\nconst Pokemons = () => {\n  const [perPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const { data: { pokemons = [] } = {} } = useQuery(GET_POKEMONS, {\n    variables: { first: 20 }\n  });\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  const pokemonsCar = paginate(pokemons, currentPage, perPage);\n  return (\n    <Fragment>\n      <Header\n        appTitle=\"Pokemon List, made with React, GraphQL\"\n        poks={pokemons.length}\n      />\n      <Switch>\n        <Route\n          path=\"/Pokemon-List-React-GraphQL/reverseList\"\n          render={(routeProps) => (\n            <ReversePokemon\n              {...routeProps}\n              pokemons={pokemons}\n              pokemonsCar={pokemonsCar}\n            />\n          )}\n        />\n        <Route\n          path=\"/Pokemon-List-React-GraphQL/\"\n          exact\n          render={(routeProps) => (\n            <Pokemon\n              {...routeProps}\n              pokemons={pokemons}\n              pokemonsCar={pokemonsCar}\n            />\n          )}\n        />\n      </Switch>\n      <Pagination\n        totalPros={pokemons.length}\n        currentPage={currentPage}\n        perPage={perPage}\n        onPageChange={handlePageChange}\n      />\n    </Fragment>\n  );\n};\n\nexport default Pokemons;\n","import _ from \"lodash\";\n\nexport const paginate = (pros, currentPage, perPage) => {\n  const startIndex = (currentPage - 1) * perPage;\n  return _(pros).slice(startIndex).take(perPage).value();\n};\n","import React from \"react\";\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport Pokemons from \"./container/Pokemons\";\n\nconst App = () => {\n  const client = new ApolloClient({\n    uri: \"https://graphql-pokemon.now.sh/\"\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <Pokemons />\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../node_modules/font-awesome/css/font-awesome.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}